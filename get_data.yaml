name: Get data
inputs:
- {name: url, type: String}
outputs:
- {name: dataset_train, type: Dataset}
- {name: dataset_test, type: Dataset}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'numpy' 'pandas' 'sklearn' 'tensorflow' 'matplotlib' 'seaborn' 'kfp==1.8.14' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def get_data(
          url: str,
          dataset_train: Output[Dataset],
          dataset_test: Output[Dataset]
      ):
          import pandas as pd
          import numpy as np
          import numpy as np
          import pandas as pd # pylint: disable=unused-import
          from sklearn.model_selection import train_test_split as tts
          import tensorflow as tf
          import tensorflow_hub as hub # pylint: disable=unused-import
          import tensorflow_text as text # pylint: disable=unused-import
          from sklearn.metrics import classification_report  # pylint: disable=ungrouped-imports
          from sklearn.metrics import confusion_matrix
          from matplotlib import pyplot as plt
          import seaborn as sn

          df_spam = pd.read_csv(url)

          # Create the label collumn
          df_spam['target']=df_spam['Class'].apply(lambda x: 1 if x=='spam' else 0)
          df_spam = df_spam.drop(['Class'], axis=1)

          train, test = tts(df_spam, test_size=0.3)
          train.to_csv(dataset_train.path + ".csv" , index=False, encoding='utf-8-sig')
          test.to_csv(dataset_test.path + ".csv" , index=False, encoding='utf-8-sig')

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - get_data
